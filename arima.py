# -*- coding: utf-8 -*-
"""ARIMA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1is9oO4eSYZ1qkBX3VfTQqrn9Z9l2ORnh
"""

!pip install scipy
!pip install pmdarima

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from statsmodels.tsa.arima.model import ARIMA
from pmdarima.arima import auto_arima

from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.statespace.sarimax import SARIMAX

from sklearn.metrics import mean_absolute_error

df = pd.read_excel("energy.xlsx", index_col="DATE", parse_dates=True)
df.head()

df.shape

df.describe()

df.index.min(), df.index.max()

df.columns = ['producao']

df['producao'].plot(figsize=(15, 5))

resultado = seasonal_decompose(df)

fig = plt.figure(figsize=(8, 6))
fig = resultado.plot()

result = adfuller(df['producao'].dropna())

print(f'Teste ADF:{result[0]}')
print(f'p-valor: {result[1]}')

result = adfuller(df['producao'].diff().dropna())

print(f'Teste ADF:{result[0]}')
print(f'p-valor: {result[1]}')

fit_arima = auto_arima(df,d=1, start_p=1, star_q=1,max_p=3, max_q=3,
                       seasonal=True,
                       m=6,
                       D=1,
                       start_P=1,
                       start_Q=1,
                       max_P=2,
                       max_Q=2,
                       information_criterion="aic",
                       trace=True,
                       error_action="ignore",
                       stepwise=True)

model = SARIMAX(df, order=(1,1,1), seasonal_order=(1,1,2,6))
sarimax_result = model.fit()

sarimax_result.summary()

pred = sarimax_result.get_prediction(start=-12)
pred_media = pred.predicted_mean

intervalo_confianca = pred.conf_int()
limite_abaixo = intervalo_confianca.iloc[:,0]
limite_acima = intervalo_confianca.iloc[:,1]

limite_abaixo[0], limite_acima[0]

pred_media[0]

datas_prev = np.array(pred_media.index)
datas = np.array(df.index)

plt.figure(figsize=(20,10))
plt.plot(datas_prev, pred_media.values, color = 'red', label = 'Previs√£o')
plt.fill_between(datas_prev, limite_abaixo, limite_acima, color = 'red')
plt.plot(datas, df.values, label = 'Real')
plt.legend()
plt.show()

mae = mean_absolute_error(df[-12:].values, pred_media.values)
print(mae)

forecast = sarimax_result.get_forecast(steps=12)
forecast_media = forecast.predicted_mean
forecast_media.size

intervalo_confianca_forecast = forecast.conf_int()
limite_abaixo_forecast = intervalo_confianca_forecast.iloc[:,0]
limite_acima_forecast = intervalo_confianca_forecast.iloc[:,1]

limite_abaixo_forecast[10], limite_acima_forecast[10]

forecast_media[10]

datas_forecast = np.asarray(forecast_media.index)
pred_dates = np.asarray(pred_media.index)

dates = np.asarray(df.index)
plt.figure(figsize=(20,10))
plt.plot(datas_forecast, forecast_media.values, color = 'green', label = 'forecast')
plt.fill_between(datas_forecast, limite_abaixo_forecast, limite_acima_forecast, color = 'lightgreen')
plt.plot(pred_dates, pred_media.values, color = 'red', label = 'previsto')
plt.plot(dates, df.values, label = 'Real')
plt.legend()
plt.show()

